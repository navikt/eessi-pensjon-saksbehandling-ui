// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/Modal Render: match snapshot 1`] = `
.c15 {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  -webkit-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
  background-color: !important;
  color: !important;
  border-color: !important;
}

.c15:hover:not(:disabled) {
  background-color: !important;
  border-color: !important;
  color: !important;
}

.c15:hover:not(:disabled) svg {
  color: !important;
}

.c15:hover:not(:disabled) svg path {
  stroke: !important;
}

.c15:focus {
  box-shadow: 0 0 0 3px !important;
}

.c15:disabled {
  color: !important;
  background-color: !important;
  border-color: !important;
}

.c15:disabled svg {
  color: !important;
}

.c15:disabled svg path {
  stroke: !important;
}

.c15:disabled .knapp__spinner {
  border: 2px solid !important;
  border-top-color: !important;
  border-right-color: !important;
}

.c15 .knapp__spinner {
  border: 2px solid !important;
  border-left-color: !important;
  border-bottom-color: !important;
}

.c15 svg {
  color: !important;
}

.c15 svg path {
  stroke: !important;
}

ui-fss.g5[id="c14"] {
  content: "c15,";
}

.c17 {
  -webkit-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
  background-color: inherit !important;
  color: !important;
  border-color: !important;
}

.c17:hover:not(:disabled) {
  background-color: !important;
  color: !important;
}

.c17:hover:not(:disabled) svg {
  color: !important;
}

.c17:hover:not(:disabled) svg path {
  stroke: !important;
}

.c17:disabled {
  color: !important;
  background-color: !important;
  border-color: !important;
}

.c17:disabled svg {
  color: !important;
}

.c17:disabled svg path {
  stroke: !important;
}

.c17:disabled .knapp__spinner {
  border: 2px solid !important;
  border-top-color: !important;
  border-right-color: !important;
}

.c17 .knapp__spinner {
  border: 2px solid !important;
  border-left-color: !important;
  border-bottom-color: !important;
}

.c17:not(:disabled) svg {
  color: !important;
}

.c17:not(:disabled) svg path {
  stroke: !important;
}

ui-fss.g7[id="c16"] {
  content: "c17,";
}

.c1 {
  display: block;
  padding: 1rem 1rem 1rem 1rem;
  border-radius: 4px;
  position: relative;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  overflow: inherit;
  max-height: 100%;
  margin-bottom: 0;
  z-index: 1010;
}

ui-fss.g49[id="c0"] {
  content: "c1,";
}

.c5 {
  position: absolute !important;
  right: 0.5rem;
  top: 0.5rem;
  z-index: 999;
}

ui-fss.g50[id="c4"] {
  content: "c5,";
}

.c7 {
  text-align: center;
}

ui-fss.g51[id="c6"] {
  content: "c7,";
}

.c9 {
  margin: 1.5rem;
  text-align: center;
}

ui-fss.g52[id="c8"] {
  content: "c9,";
}

.c11 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

ui-fss.g53[id="c10"] {
  content: "c11,";
}

.c13 {
  margin-right: 1rem;
  margin-top: 0.5rem;
  margin-botton: 0.5rem;
}

ui-fss.g54[id="c12"] {
  content: "c13,";
}

.c3 {
  overflow: auto;
  max-height: 85vh;
}

.c3.icon {
  margin-top: 3rem;
}

.c3.buttons {
  margin-top: 3rem;
}

ui-fss.g56[id="c2"] {
  content: "c3,";
}

<Modal
  closeButton={true}
  highContrast={false}
  modal={
    Object {
      "modalButtons": Array [
        Object {
          "main": true,
          "onClick": [MockFunction],
          "text": "modalMainButtonText",
        },
        Object {
          "onClick": [MockFunction],
          "text": "modalOtherButtonText",
        },
      ],
      "modalText": "mockModalText",
      "modalTitle": "mockModalTitle",
    }
  }
  onModalClose={[MockFunction]}
>
  <Styled(Modal)
    isOpen={true}
    onRequestClose={[Function]}
    overlayClassName="modal__overlay"
  >
    <Modal
      ariaHideApp={true}
      bodyOpenClassName="ReactModal__Body--open"
      className="c0 c1"
      closeTimeoutMS={0}
      contentElement={[Function]}
      isOpen={true}
      onRequestClose={[Function]}
      overlayClassName="modal__overlay"
      overlayElement={[Function]}
      parentSelector={[Function]}
      portalClassName="ReactModalPortal"
      preventScroll={false}
      role="dialog"
      shouldCloseOnEsc={true}
      shouldCloseOnOverlayClick={true}
      shouldFocusAfterRender={true}
      shouldReturnFocusAfterClose={true}
    >
      <Portal
        containerInfo={
          .c15 {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  -webkit-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
  background-color: !important;
  color: !important;
  border-color: !important;
}

.c15:hover:not(:disabled) {
  background-color: !important;
  border-color: !important;
  color: !important;
}

.c15:hover:not(:disabled) svg {
  color: !important;
}

.c15:hover:not(:disabled) svg path {
  stroke: !important;
}

.c15:focus {
  box-shadow: 0 0 0 3px !important;
}

.c15:disabled {
  color: !important;
  background-color: !important;
  border-color: !important;
}

.c15:disabled svg {
  color: !important;
}

.c15:disabled svg path {
  stroke: !important;
}

.c15:disabled .knapp__spinner {
  border: 2px solid !important;
  border-top-color: !important;
  border-right-color: !important;
}

.c15 .knapp__spinner {
  border: 2px solid !important;
  border-left-color: !important;
  border-bottom-color: !important;
}

.c15 svg {
  color: !important;
}

.c15 svg path {
  stroke: !important;
}

ui-fss.g5[id="c14"] {
  content: "c15,";
}

.c17 {
  -webkit-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
  background-color: inherit !important;
  color: !important;
  border-color: !important;
}

.c17:hover:not(:disabled) {
  background-color: !important;
  color: !important;
}

.c17:hover:not(:disabled) svg {
  color: !important;
}

.c17:hover:not(:disabled) svg path {
  stroke: !important;
}

.c17:disabled {
  color: !important;
  background-color: !important;
  border-color: !important;
}

.c17:disabled svg {
  color: !important;
}

.c17:disabled svg path {
  stroke: !important;
}

.c17:disabled .knapp__spinner {
  border: 2px solid !important;
  border-top-color: !important;
  border-right-color: !important;
}

.c17 .knapp__spinner {
  border: 2px solid !important;
  border-left-color: !important;
  border-bottom-color: !important;
}

.c17:not(:disabled) svg {
  color: !important;
}

.c17:not(:disabled) svg path {
  stroke: !important;
}

ui-fss.g7[id="c16"] {
  content: "c17,";
}

.c1 {
  display: block;
  padding: 1rem 1rem 1rem 1rem;
  border-radius: 4px;
  position: relative;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  overflow: inherit;
  max-height: 100%;
  margin-bottom: 0;
  z-index: 1010;
}

ui-fss.g49[id="c0"] {
  content: "c1,";
}

.c5 {
  position: absolute !important;
  right: 0.5rem;
  top: 0.5rem;
  z-index: 999;
}

ui-fss.g50[id="c4"] {
  content: "c5,";
}

.c7 {
  text-align: center;
}

ui-fss.g51[id="c6"] {
  content: "c7,";
}

.c9 {
  margin: 1.5rem;
  text-align: center;
}

ui-fss.g52[id="c8"] {
  content: "c9,";
}

.c11 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

ui-fss.g53[id="c10"] {
  content: "c11,";
}

.c13 {
  margin-right: 1rem;
  margin-top: 0.5rem;
  margin-botton: 0.5rem;
}

ui-fss.g54[id="c12"] {
  content: "c13,";
}

.c3 {
  overflow: auto;
  max-height: 85vh;
}

.c3.icon {
  margin-top: 3rem;
}

.c3.buttons {
  margin-top: 3rem;
}

ui-fss.g56[id="c2"] {
  content: "c3,";
}

<div
            class="ReactModalPortal"
          >
            <div
              class="ReactModal__Overlay modal__overlay"
            >
              <div
                aria-modal="true"
                class="ReactModal__Content c0 c1"
                role="dialog"
                tabindex="-1"
              >
                <div
                  class="c2 c3"
                >
                  <button
                    class="lukknapp c4 c5"
                    data-testid="c-modal__close-button-id"
                  >
                    <span
                      class="text-hide"
                    />
                  </button>
                  <h2
                    class="typo-undertittel c6 c7"
                    data-testid="c-modal__title-id"
                  >
                    mockModalTitle
                  </h2>
                  <div
                    class="c8 c9"
                    data-testid="c-modal__text-id"
                  >
                    mockModalText
                  </div>
                </div>
                <div
                  class="c10 c11 buttons"
                >
                  <div
                    class="c12 c13"
                  >
                    <button
                      class="knapp c14 c15 knapp--hoved"
                      data-testid="c-modal__button-id-0"
                      id="c-modal__button-id-0"
                      type="submit"
                    >
                      modalMainButtonText
                    </button>
                  </div>
                  <div
                    class="c12 c13"
                  >
                    <button
                      class="knapp c16 c17 knapp--standard"
                      data-testid="c-modal__button-id-1"
                      id="c-modal__button-id-1"
                      type="submit"
                    >
                      modalOtherButtonText
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        }
      >
        <ModalPortal
          ariaHideApp={true}
          bodyOpenClassName="ReactModal__Body--open"
          className="c0 c1"
          closeTimeoutMS={0}
          contentElement={[Function]}
          defaultStyles={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "background": "#fff",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
              },
            }
          }
          isOpen={true}
          onRequestClose={[Function]}
          overlayClassName="modal__overlay"
          overlayElement={[Function]}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          preventScroll={false}
          role="dialog"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "content": Object {},
              "overlay": Object {},
            }
          }
        >
          <div
            className="ReactModal__Overlay modal__overlay"
            onClick={[Function]}
            onMouseDown={[Function]}
            style={Object {}}
          >
            <div
              aria-modal={true}
              className="ReactModal__Content c0 c1"
              onClick={[Function]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              role="dialog"
              style={Object {}}
              tabIndex="-1"
            >
              <styled.div
                className=""
              >
                <div
                  className="c2 c3"
                >
                  <Styled(Lukknapp)
                    data-testid="c-modal__close-button-id"
                    onClick={[Function]}
                  >
                    <Lukknapp
                      bla={false}
                      className="c4 c5"
                      data-testid="c-modal__close-button-id"
                      hvit={false}
                      onClick={[Function]}
                      overstHjorne={false}
                    >
                      <button
                        className="lukknapp c4 c5"
                        data-testid="c-modal__close-button-id"
                        onClick={[Function]}
                      >
                        <span
                          className="text-hide"
                        />
                      </button>
                    </Lukknapp>
                  </Styled(Lukknapp)>
                  <Styled(Undertittel)
                    data-testid="c-modal__title-id"
                  >
                    <Undertittel
                      className="c6 c7"
                      data-testid="c-modal__title-id"
                    >
                      <TypografiBase
                        className="c6 c7"
                        data-testid="c-modal__title-id"
                        type="undertittel"
                      >
                        <h2
                          className="typo-undertittel c6 c7"
                          data-testid="c-modal__title-id"
                        >
                          mockModalTitle
                        </h2>
                      </TypografiBase>
                    </Undertittel>
                  </Styled(Undertittel)>
                  <styled.div
                    data-testid="c-modal__text-id"
                  >
                    <div
                      className="c8 c9"
                      data-testid="c-modal__text-id"
                    >
                      mockModalText
                    </div>
                  </styled.div>
                </div>
              </styled.div>
              <styled.div
                className="buttons"
              >
                <div
                  className="c10 c11 buttons"
                >
                  <styled.div
                    key="0"
                  >
                    <div
                      className="c12 c13"
                    >
                      <Styled(u)
                        data-testid="c-modal__button-id-0"
                        disabled={false}
                        id="c-modal__button-id-0"
                        key="modalMainButtonText"
                        onClick={[Function]}
                      >
                        <u
                          className="c14 c15"
                          data-testid="c-modal__button-id-0"
                          disabled={false}
                          id="c-modal__button-id-0"
                          onClick={[Function]}
                        >
                          <p
                            autoDisableVedSpinner={false}
                            className="c14 c15"
                            data-testid="c-modal__button-id-0"
                            disabled={false}
                            htmlType="submit"
                            id="c-modal__button-id-0"
                            inaktivKlasseVedDisabled={false}
                            kompakt={false}
                            mini={false}
                            onClick={[Function]}
                            spinner={false}
                            type="hoved"
                          >
                            <button
                              className="knapp c14 c15 knapp--hoved"
                              data-testid="c-modal__button-id-0"
                              disabled={false}
                              id="c-modal__button-id-0"
                              onClick={[Function]}
                              type="submit"
                            >
                              modalMainButtonText
                            </button>
                          </p>
                        </u>
                      </Styled(u)>
                    </div>
                  </styled.div>
                  <styled.div
                    key="1"
                  >
                    <div
                      className="c12 c13"
                    >
                      <Styled(u)
                        data-testid="c-modal__button-id-1"
                        disabled={false}
                        id="c-modal__button-id-1"
                        key="modalOtherButtonText"
                        onClick={[Function]}
                      >
                        <u
                          className="c16 c17"
                          data-testid="c-modal__button-id-1"
                          disabled={false}
                          id="c-modal__button-id-1"
                          onClick={[Function]}
                        >
                          <p
                            autoDisableVedSpinner={false}
                            className="c16 c17"
                            data-testid="c-modal__button-id-1"
                            disabled={false}
                            htmlType="submit"
                            id="c-modal__button-id-1"
                            inaktivKlasseVedDisabled={false}
                            kompakt={false}
                            mini={false}
                            onClick={[Function]}
                            spinner={false}
                            type="standard"
                          >
                            <button
                              className="knapp c16 c17 knapp--standard"
                              data-testid="c-modal__button-id-1"
                              disabled={false}
                              id="c-modal__button-id-1"
                              onClick={[Function]}
                              type="submit"
                            >
                              modalOtherButtonText
                            </button>
                          </p>
                        </u>
                      </Styled(u)>
                    </div>
                  </styled.div>
                </div>
              </styled.div>
            </div>
          </div>
        </ModalPortal>
      </Portal>
    </Modal>
  </Styled(Modal)>
</Modal>
`;
