// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/Modal Render: match snapshot 1`] = `
.c15 {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  background-color: #0067c5;
  color: #FFFFFF;
  border-color: #0067c5;
}

.c15:hover:not(:disabled) {
  background-color: #0067c5;
  border-color: #0067c5;
  color: #FFFFFF;
}

.c15:hover:not(:disabled) svg path {
  stroke: #FFFFFF;
}

.c15:disabled {
  color: #FFFFFF;
  background-color: #b7b1a9;
}

.c15 svg path {
  stroke: #0067c5;
}

ui-fss.g11[id="c14"] {
  content: "c15,";
}

.c17 {
  background-color: inherit;
  color: #0067c5;
  border-color: #0067c5;
}

.c17:hover:not(:disabled) {
  background-color: #0067c5;
  color: #FFFFFF;
}

.c17:hover:not(:disabled) svg path {
  stroke: #FFFFFF;
}

.c17 svg path {
  stroke: #0067c5;
}

ui-fss.g13[id="c16"] {
  content: "c17,";
}

.c1 {
  display: block;
  padding: 1rem 1rem 1rem 1rem;
  border-radius: 4px;
  position: relative;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  overflow: inherit;
  max-height: 100%;
  margin-bottom: 0;
  z-index: 1010;
  color: #3e3832;
  background-color: #FFFFFF;
}

ui-fss.g28[id="c0"] {
  content: "c1,";
}

.c5 {
  position: absolute !important;
  right: 0.5rem;
  top: 0.5rem;
  z-index: 999;
}

ui-fss.g30[id="c4"] {
  content: "c5,";
}

.c7 {
  text-align: center;
}

ui-fss.g31[id="c6"] {
  content: "c7,";
}

.c9 {
  margin: 1.5rem;
  text-align: center;
}

ui-fss.g32[id="c8"] {
  content: "c9,";
}

.c11 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

ui-fss.g33[id="c10"] {
  content: "c11,";
}

.c13 {
  margin-right: 1rem;
  margin-top: 0.5rem;
  margin-botton: 0.5rem;
}

ui-fss.g34[id="c12"] {
  content: "c13,";
}

.c3 {
  overflow: auto;
  max-height: 85vh;
}

.c3.icon {
  margin-top: 3rem;
}

.c3.buttons {
  margin-top: 3rem;
}

ui-fss.g36[id="c2"] {
  content: "c3,";
}

<Modal
  closeButton={true}
  highContrast={false}
  modal={
    Object {
      "modalButtons": Array [
        Object {
          "main": true,
          "onClick": [MockFunction],
          "text": "modalMainButtonText",
        },
        Object {
          "onClick": [MockFunction],
          "text": "modalOtherButtonText",
        },
      ],
      "modalText": "mockModalText",
      "modalTitle": "mockModalTitle",
    }
  }
  onModalClose={[MockFunction]}
>
  <Xe
    highContrast={false}
  >
    <Component
      theme={
        Object {
          "alternative-background-color": "#e9e7e7",
          "black": "#000000",
          "border-radius-base": "4px",
          "border-radius-large": "6px",
          "border-radius-small": "2px",
          "container-desktop": "(940px + @grid-gutter-width)",
          "container-large-desktop": "(1140px + @grid-gutter-width)",
          "container-lg": "(1140px + @grid-gutter-width)",
          "container-md": "(940px + @grid-gutter-width)",
          "container-sm": "(720px + @grid-gutter-width)",
          "container-tablet": "(720px + @grid-gutter-width)",
          "fokusFarge": "#01b19d",
          "grayBackground": "#e9e7e7",
          "grayIcon": "#b7b1a9",
          "grayInactive": "#78706a",
          "grayModia": "#333333",
          "grid-columns": "12",
          "grid-float-breakpoint": "768px",
          "grid-float-breakpoint-max": "(@grid-float-breakpoint - 1)",
          "grid-gutter-width": "16px",
          "inverted-font-color": "#FFFFFF",
          "line-height-large": "1.3333333",
          "line-height-small": "1.5",
          "main-active-color": "#43dfNaN",
          "main-background-color": "#FFFFFF",
          "main-border-color": "#78706a",
          "main-border-radius": "4px",
          "main-disabled-color": "#b7b1a9",
          "main-error-color": "#ba3a26",
          "main-focus-color": "#01b19d",
          "main-font-color": "#3e3832",
          "main-hover-color": "#20f4NaN",
          "main-interactive-color": "#0067c5",
          "main-success-color": "#06893a",
          "main-warning-color": "#ff9100",
          "navBakgrunn": "#ffffff",
          "navBla": "#0067c5",
          "navBlaDarken20": "#007fb7",
          "navBlaDarken40": "#0198aa",
          "navBlaDarken60": "#01b19d",
          "navBlaDarken80": "#02ca90",
          "navBlaLighten20": "#0385NaN",
          "navBlaLighten40": "#06a3NaN",
          "navBlaLighten60": "#09c2NaN",
          "navBlaLighten80": "#0ce0NaN",
          "navDypBla": "#005b82",
          "navDypBlaDarken20": "#007682",
          "navDypBlaDarken40": "#019182",
          "navDypBlaDarken60": "#01ac82",
          "navDypBlaDarken80": "#02c782",
          "navDypBlaLighten20": "#037bNaN",
          "navDypBlaLighten40": "#069cNaN",
          "navDypBlaLighten60": "#09bdNaN",
          "navDypBlaLighten80": "#0cdeNaN",
          "navGra20": "#c6c2bf",
          "navGra40": "#b7b1a9",
          "navGra60": "#78706a",
          "navGra80": "#59514b",
          "navGraBakgrunn": "#f1f1f1",
          "navGronn": "#06893a",
          "navGronnDarken20": "#059b48",
          "navGronnDarken40": "#04ad57",
          "navGronnDarken60": "#04bf65",
          "navGronnDarken80": "#03d174",
          "navGronnLighten20": "#07a0NaN",
          "navGronnLighten40": "#09b8NaN",
          "navGronnLighten60": "#0bcfNaN",
          "navGronnLighten80": "#0de7NaN",
          "navLilla": "#634689",
          "navLillaDarken20": "#4f6587",
          "navLillaDarken40": "#3c8486",
          "navLillaDarken60": "#29a485",
          "navLillaDarken80": "#16c384",
          "navLillaLighten20": "#526bNaN",
          "navLillaLighten40": "#4190NaN",
          "navLillaLighten60": "#30b5NaN",
          "navLillaLighten80": "#1fdaNaN",
          "navLimeGronn": "#a2ad00",
          "navLimeGronnDarken20": "#82b71a",
          "navLimeGronnDarken40": "#62c234",
          "navLimeGronnDarken60": "#42cd4e",
          "navLimeGronnDarken80": "#22d868",
          "navLimeGronnLighten20": "#84bdNaN",
          "navLimeGronnLighten40": "#67cdNaN",
          "navLimeGronnLighten60": "#49deNaN",
          "navLimeGronnLighten80": "#2ceeNaN",
          "navLysBla": "#66cbec",
          "navLysBlaDarken20": "#52cfd7",
          "navLysBlaDarken40": "#3ed4c2",
          "navLysBlaDarken60": "#2ad9ad",
          "navLysBlaDarken80": "#16de98",
          "navLysBlaLighten20": "#54d5NaN",
          "navLysBlaLighten40": "#43dfNaN",
          "navLysBlaLighten60": "#31eaNaN",
          "navLysBlaLighten80": "#20f4NaN",
          "navLysGra": "#e9e7e7",
          "navMorkGra": "#3e3832",
          "navOransje": "#ff9100",
          "navOransjeDarken20": "#cca11a",
          "navOransjeDarken40": "#9ab134",
          "navOransjeDarken60": "#67c24e",
          "navOransjeDarken80": "#35d268",
          "navOransjeLighten20": "#cfa7NaN",
          "navOransjeLighten40": "#9fbdNaN",
          "navOransjeLighten60": "#6fd3NaN",
          "navOransjeLighten80": "#3fe9NaN",
          "navRod": "#c30000",
          "navRodDarken20": "#9c2d1a",
          "navRodDarken40": "#765a34",
          "navRodDarken60": "#4f884e",
          "navRodDarken80": "#29b568",
          "navRodLighten20": "#9f33NaN",
          "navRodLighten40": "#7b66NaN",
          "navRodLighten60": "#5799NaN",
          "navRodLighten80": "#33ccNaN",
          "orangeFocus": "#ffbd66",
          "orangeFocusDarken20": "#ccc46b",
          "orangeFocusDarken40": "#9acc71",
          "orangeFocusDarken60": "#67d377",
          "orangeFocusDarken80": "#35db7d",
          "orangeFocusLighten20": "#cfcaNaN",
          "orangeFocusLighten40": "#9fd7NaN",
          "orangeFocusLighten60": "#6fe4NaN",
          "orangeFocusLighten80": "#3ff1NaN",
          "padding-base-horizontal": "12px",
          "padding-base-vertical": "6px",
          "padding-large-horizontal": "16px",
          "padding-large-vertical": "10px",
          "padding-small-horizontal": "10px",
          "padding-small-vertical": "5px",
          "padding-xs-horizontal": "5px",
          "padding-xs-vertical": "1px",
          "pinkErrorBg": "#f3e3e3",
          "redError": "#ba3a26",
          "redErrorDarken20": "#955b38",
          "redErrorDarken40": "#707d4b",
          "redErrorDarken60": "#4c9f5d",
          "redErrorDarken80": "#27c170",
          "redErrorLighten20": "#9761NaN",
          "redErrorLighten40": "#7588NaN",
          "redErrorLighten60": "#53b0NaN",
          "redErrorLighten80": "#31d7NaN",
          "screen-desktop": "992px",
          "screen-lg": "1200px",
          "screen-lg-desktop": "1200px",
          "screen-lg-min": "1200px",
          "screen-md": "992px",
          "screen-md-max": "(@screen-lg-min - 1)",
          "screen-md-min": "992px",
          "screen-sm": "768px",
          "screen-sm-max": "(@screen-md-min - 1)",
          "screen-sm-min": "768px",
          "screen-tablet": "768px",
          "screen-xs-max": "(@screen-sm-min - 1)",
          "type": "theme",
          "white": "#FFFFFF",
        }
      }
    >
      <Memo(l) />
      <Styled(Modal)
        isOpen={true}
        onRequestClose={[Function]}
        overlayClassName="modal__overlay"
      >
        <Modal
          ariaHideApp={true}
          bodyOpenClassName="ReactModal__Body--open"
          className="c0 c1"
          closeTimeoutMS={0}
          contentElement={[Function]}
          isOpen={true}
          onRequestClose={[Function]}
          overlayClassName="modal__overlay"
          overlayElement={[Function]}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          preventScroll={false}
          role="dialog"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
        >
          <Portal
            containerInfo={
              .c15 {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  background-color: #0067c5;
  color: #FFFFFF;
  border-color: #0067c5;
}

.c15:hover:not(:disabled) {
  background-color: #0067c5;
  border-color: #0067c5;
  color: #FFFFFF;
}

.c15:hover:not(:disabled) svg path {
  stroke: #FFFFFF;
}

.c15:disabled {
  color: #FFFFFF;
  background-color: #b7b1a9;
}

.c15 svg path {
  stroke: #0067c5;
}

ui-fss.g11[id="c14"] {
  content: "c15,";
}

.c17 {
  background-color: inherit;
  color: #0067c5;
  border-color: #0067c5;
}

.c17:hover:not(:disabled) {
  background-color: #0067c5;
  color: #FFFFFF;
}

.c17:hover:not(:disabled) svg path {
  stroke: #FFFFFF;
}

.c17 svg path {
  stroke: #0067c5;
}

ui-fss.g13[id="c16"] {
  content: "c17,";
}

.c1 {
  display: block;
  padding: 1rem 1rem 1rem 1rem;
  border-radius: 4px;
  position: relative;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  overflow: inherit;
  max-height: 100%;
  margin-bottom: 0;
  z-index: 1010;
  color: #3e3832;
  background-color: #FFFFFF;
}

ui-fss.g28[id="c0"] {
  content: "c1,";
}

.c5 {
  position: absolute !important;
  right: 0.5rem;
  top: 0.5rem;
  z-index: 999;
}

ui-fss.g30[id="c4"] {
  content: "c5,";
}

.c7 {
  text-align: center;
}

ui-fss.g31[id="c6"] {
  content: "c7,";
}

.c9 {
  margin: 1.5rem;
  text-align: center;
}

ui-fss.g32[id="c8"] {
  content: "c9,";
}

.c11 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

ui-fss.g33[id="c10"] {
  content: "c11,";
}

.c13 {
  margin-right: 1rem;
  margin-top: 0.5rem;
  margin-botton: 0.5rem;
}

ui-fss.g34[id="c12"] {
  content: "c13,";
}

.c3 {
  overflow: auto;
  max-height: 85vh;
}

.c3.icon {
  margin-top: 3rem;
}

.c3.buttons {
  margin-top: 3rem;
}

ui-fss.g36[id="c2"] {
  content: "c3,";
}

<div
                class="ReactModalPortal"
              >
                <div
                  class="ReactModal__Overlay ReactModal__Overlay--after-open modal__overlay"
                >
                  <div
                    aria-modal="true"
                    class="ReactModal__Content ReactModal__Content--after-open c0 c1"
                    role="dialog"
                    tabindex="-1"
                  >
                    <div
                      class="c2 c3"
                    >
                      <button
                        class="lukknapp c4 c5"
                        data-test-id="c-modal__close-button-id"
                      >
                        <span
                          class="text-hide"
                        />
                      </button>
                      <h2
                        class="typo-undertittel c6 c7"
                        data-test-id="c-modal__title-id"
                      >
                        mockModalTitle
                      </h2>
                      <div
                        class="c8 c9"
                        data-test-id="c-modal__text-id"
                      >
                        mockModalText
                      </div>
                    </div>
                    <div
                      class="c10 c11 buttons"
                    >
                      <div
                        class="c12 c13"
                      >
                        <button
                          class="knapp c14 c15 knapp--hoved"
                          data-test-id="c-modal__button-id-0"
                          id="c-modal__button-id-0"
                          type="submit"
                        >
                          modalMainButtonText
                        </button>
                      </div>
                      <div
                        class="c12 c13"
                      >
                        <button
                          class="knapp c16 c17 knapp--standard"
                          data-test-id="c-modal__button-id-1"
                          id="c-modal__button-id-1"
                          type="submit"
                        >
                          modalOtherButtonText
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
          >
            <ModalPortal
              ariaHideApp={true}
              bodyOpenClassName="ReactModal__Body--open"
              className="c0 c1"
              closeTimeoutMS={0}
              contentElement={[Function]}
              defaultStyles={
                Object {
                  "content": Object {
                    "WebkitOverflowScrolling": "touch",
                    "background": "#fff",
                    "border": "1px solid #ccc",
                    "borderRadius": "4px",
                    "bottom": "40px",
                    "left": "40px",
                    "outline": "none",
                    "overflow": "auto",
                    "padding": "20px",
                    "position": "absolute",
                    "right": "40px",
                    "top": "40px",
                  },
                  "overlay": Object {
                    "backgroundColor": "rgba(255, 255, 255, 0.75)",
                    "bottom": 0,
                    "left": 0,
                    "position": "fixed",
                    "right": 0,
                    "top": 0,
                  },
                }
              }
              isOpen={true}
              onRequestClose={[Function]}
              overlayClassName="modal__overlay"
              overlayElement={[Function]}
              parentSelector={[Function]}
              portalClassName="ReactModalPortal"
              preventScroll={false}
              role="dialog"
              shouldCloseOnEsc={true}
              shouldCloseOnOverlayClick={true}
              shouldFocusAfterRender={true}
              shouldReturnFocusAfterClose={true}
              style={
                Object {
                  "content": Object {},
                  "overlay": Object {},
                }
              }
            >
              <div
                className="ReactModal__Overlay ReactModal__Overlay--after-open modal__overlay"
                onClick={[Function]}
                onMouseDown={[Function]}
                style={Object {}}
              >
                <div
                  aria-modal={true}
                  className="ReactModal__Content ReactModal__Content--after-open c0 c1"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  role="dialog"
                  style={Object {}}
                  tabIndex="-1"
                >
                  <styled.div
                    className=""
                  >
                    <div
                      className="c2 c3"
                    >
                      <Styled(Lukknapp)
                        data-test-id="c-modal__close-button-id"
                        onClick={[Function]}
                      >
                        <Lukknapp
                          bla={false}
                          className="c4 c5"
                          data-test-id="c-modal__close-button-id"
                          hvit={false}
                          onClick={[Function]}
                          overstHjorne={false}
                        >
                          <button
                            className="lukknapp c4 c5"
                            data-test-id="c-modal__close-button-id"
                            onClick={[Function]}
                          >
                            <span
                              className="text-hide"
                            />
                          </button>
                        </Lukknapp>
                      </Styled(Lukknapp)>
                      <Styled(Undertittel)
                        data-test-id="c-modal__title-id"
                      >
                        <Undertittel
                          className="c6 c7"
                          data-test-id="c-modal__title-id"
                        >
                          <TypografiBase
                            className="c6 c7"
                            data-test-id="c-modal__title-id"
                            type="undertittel"
                          >
                            <h2
                              className="typo-undertittel c6 c7"
                              data-test-id="c-modal__title-id"
                            >
                              mockModalTitle
                            </h2>
                          </TypografiBase>
                        </Undertittel>
                      </Styled(Undertittel)>
                      <styled.div
                        data-test-id="c-modal__text-id"
                      >
                        <div
                          className="c8 c9"
                          data-test-id="c-modal__text-id"
                        >
                          mockModalText
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                  <styled.div
                    className="buttons"
                  >
                    <div
                      className="c10 c11 buttons"
                    >
                      <styled.div
                        key="0"
                      >
                        <div
                          className="c12 c13"
                        >
                          <Styled(o)
                            data-test-id="c-modal__button-id-0"
                            disabled={false}
                            id="c-modal__button-id-0"
                            key="modalMainButtonText"
                            onClick={[Function]}
                          >
                            <o
                              className="c14 c15"
                              data-test-id="c-modal__button-id-0"
                              disabled={false}
                              id="c-modal__button-id-0"
                              onClick={[Function]}
                            >
                              <d
                                autoDisableVedSpinner={false}
                                className="c14 c15"
                                data-test-id="c-modal__button-id-0"
                                disabled={false}
                                htmlType="submit"
                                id="c-modal__button-id-0"
                                inaktivKlasseVedDisabled={false}
                                kompakt={false}
                                mini={false}
                                onClick={[Function]}
                                spinner={false}
                                type="hoved"
                              >
                                <button
                                  className="knapp c14 c15 knapp--hoved"
                                  data-test-id="c-modal__button-id-0"
                                  disabled={false}
                                  id="c-modal__button-id-0"
                                  onClick={[Function]}
                                  type="submit"
                                >
                                  modalMainButtonText
                                </button>
                              </d>
                            </o>
                          </Styled(o)>
                        </div>
                      </styled.div>
                      <styled.div
                        key="1"
                      >
                        <div
                          className="c12 c13"
                        >
                          <Styled(o)
                            data-test-id="c-modal__button-id-1"
                            disabled={false}
                            id="c-modal__button-id-1"
                            key="modalOtherButtonText"
                            onClick={[Function]}
                          >
                            <o
                              className="c16 c17"
                              data-test-id="c-modal__button-id-1"
                              disabled={false}
                              id="c-modal__button-id-1"
                              onClick={[Function]}
                            >
                              <d
                                autoDisableVedSpinner={false}
                                className="c16 c17"
                                data-test-id="c-modal__button-id-1"
                                disabled={false}
                                htmlType="submit"
                                id="c-modal__button-id-1"
                                inaktivKlasseVedDisabled={false}
                                kompakt={false}
                                mini={false}
                                onClick={[Function]}
                                spinner={false}
                                type="standard"
                              >
                                <button
                                  className="knapp c16 c17 knapp--standard"
                                  data-test-id="c-modal__button-id-1"
                                  disabled={false}
                                  id="c-modal__button-id-1"
                                  onClick={[Function]}
                                  type="submit"
                                >
                                  modalOtherButtonText
                                </button>
                              </d>
                            </o>
                          </Styled(o)>
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                </div>
              </div>
            </ModalPortal>
          </Portal>
        </Modal>
      </Styled(Modal)>
    </Component>
  </Xe>
</Modal>
`;
